<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="ControllerMode" Id="{4c6eba13-5fdf-4d77-bafc-55c67c47bfe1}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM ControllerMode
VAR_IN_OUT
	fbMover							: MC_PlanarMover;
	fbMover_Axis					: ARRAY [1..6] OF AXIS_REF;
END_VAR
VAR //General
	afbMoverFB						: ARRAY [0..100] OF MC_PlanarFeedback;
	iControlMover					: INT;
	i: INT;
	iCommand: INT;
	
	stActPos						: MoverVector;
	lrStandardPos_x					: LREAL := 120;
	lrStandardPos_y					: LREAL := 120;
	lrStandardPos_c					: LREAL := 0;
END_VAR
VAR //External Set Point
	stExtSetPoi						: ST_ExternalSetpointGenerationOptions;
	stMoverVector_Pos				: MoverVector;
	stMoverVector_Vel				: MoverVector;
	stMoverVector_Acc				: MoverVector;
END_VAR
VAR //Pad
	lrPos_Pad_x						: LREAL;
	lrPos_Pad_y						: LREAL;
	lrPos_Pad_c						: LREAL;
	fbPadPosition					: PositionXYC;
	fbPadCondition					: DynamicConstraint_PathXY;
	bStart_Pad						: BOOL;
	bBusy_Pad						: BOOL;
END_VAR
VAR //Left Stick
	afbMoveAbsolute_LStick_x		: ARRAY [0..1] OF MC_MoveAbsolute;
	afbMoveAbsolute_LStick_y		: ARRAY [0..1] OF MC_MoveAbsolute;
	lrTmpPos_LStick_x				: LREAL;
	lrTmpPos_LStick_y				: LREAL;
	lrPos_LStick_x					: LREAL;
	lrPos_LStick_y					: LREAL;
	lrVel_LStick_x					: LREAL := 500;
	lrVel_LStick_y					: LREAL := 500;
	lrAcc_LStick_x					: LREAL := 1000;
	lrAcc_LStick_y					: LREAL := 1000;
END_VAR
VAR //Right Stick
	lrRange_AB						: LREAL := 1; 
	afbMoveAbsolute_RStick_a		: ARRAY [0..1] OF MC_MoveAbsolute;
	afbMoveAbsolute_RStick_b		: ARRAY [0..1] OF MC_MoveAbsolute;
	lrTmpPos_RStick_a				: LREAL;
	lrTmpPos_RStick_b				: LREAL;
	lrPos_RStick_a					: LREAL;
	lrPos_RStick_b					: LREAL;
	lrVel_RStick_a					: LREAL := 100;
	lrVel_RStick_b					: LREAL := 100;
	lrAcc_RStick_a					: LREAL := 1000;
	lrAcc_RStick_b					: LREAL := 1000;
END_VAR
VAR // A Button
	fbMoveAbsolute_AButton_z		: MC_MoveAbsolute;
	bButton_A						: BOOL;
	bPos_High_z						: BOOL;
	lrPos_AButton_z					: LREAL;
	lrVel_AButton_z					: LREAL := 100;
	lrAcc_AButton_z					: LREAL := 1000;
END_VAR
VAR // B Button
	
END_VAR
VAR // X Button
	
END_VAR
VAR // Y Button
	
END_VAR
VAR //L1 Button
	fbMoveAbsolute_L1Button_c		: MC_MoveAbsolute;
	bButton_L1						: BOOL;
	lrPos_L1Button_c				: LREAL := 200;
	lrVel_L1Button_c				: LREAL := 1000;
	lrAcc_L1Button_c				: LREAL := 10000;
	fbCondition_L1					: DynamicConstraint_Coordinates;
END_VAR
VAR //R1 Button
	fbMoveAbsolute_R1Button_c		: MC_MoveAbsolute;
	bButton_R1						: BOOL;
	lrPos_R1Button_c				: LREAL := 200;
	lrVel_R1Button_c				: LREAL := 1000;
	lrAcc_R1Button_c				: LREAL := 10000;
	fbCondition_R1					: DynamicConstraint_Coordinates;
END_VAR
VAR // L2 Button 
	bReload_L2Button				: BOOL;
	bPosReload_L2Button				: BOOL;
	afbMoveAbsolute_L2Button_c		: ARRAY [0..1] OF MC_MoveAbsolute;
	lrTmpVel_L2Button_c				: LREAL;
	lrPos_L2Button_c				: LREAL;
	lrVel_L2Button_c				: LREAL := 100;
	lrAcc_L2Button_c				: LREAL := 10000;
END_VAR
VAR // R2 Button
	bReload_R2Button				: BOOL;
	bPosReload_R2Button				: BOOL;
	afbMoveAbsolute_R2Button_c		: ARRAY [0..1] OF MC_MoveAbsolute;
	lrTmpVel_R2Button_c				: LREAL;
	lrPos_R2Button_c				: LREAL;
	lrVel_R2Button_c				: LREAL := 100;
	lrAcc_R2Button_c				: LREAL := 10000;
END_VAR
VAR // Start Button
	bPowered						: BOOL;
	bButton_Start					: BOOL;
	afbPower						: ARRAY [1..6] OF MC_Power;
END_VAR
VAR // Back Button
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[stActPos := fbMover.MCTOPLC.ACT.ActPos;

aSystem();
aExternalSetPoint();

FOR i := 0 TO 100 DO
	afbMoverFB[i].Update();
END_FOR]]></ST>
    </Implementation>
    <Action Name="aCommand" Id="{c01d41ce-d94e-41f6-8bc0-512a9eff8c5d}">
      <Implementation>
        <ST><![CDATA[CASE iCommand OF
	Command.Pad: //十字キー CPosition
	lrPos_Pad_c := stActPos.c;
	fbPadPosition.SetValuesXYC(
		x:= lrPos_Pad_x, y:= lrPos_Pad_y, c:= lrPos_Pad_c);
	fbPadCondition.SetValuesVADJ(
		V:= gc_alrHighCondition_Pos[0], A:= gc_alrHighCondition_Pos[1], 
		D:= gc_alrHighCondition_Pos[2], J:= gc_alrHighCondition_Pos[3]);
	fbMover.MoveToPosition(
		 commandFeedback:= afbMoverFB[2],
		 targetPosition:= fbPadPosition,
		 constraint:= fbPadCondition,
		 options:= 0);
	bBusy_Pad := TRUE;
		
	Command.LeftStick: //XY free move
	IF afbMoveAbsolute_LStick_x[0].Error OR afbMoveAbsolute_LStick_x[1].Error
	OR afbMoveAbsolute_LStick_x[0].Error OR afbMoveAbsolute_LStick_x[1].Error THEN
		afbMoveAbsolute_LStick_x[0].Execute := FALSE;
		afbMoveAbsolute_LStick_x[1].Execute := FALSE;
		afbMoveAbsolute_LStick_y[0].Execute := FALSE;
		afbMoveAbsolute_LStick_y[1].Execute := FALSE;
	END_IF
	//x
	lrTmpPos_LStick_x := lrPos_LStick_x;
	IF g_fbTcJoy.iLeftStick_X_Axis = 0 THEN
		lrPos_LStick_x := 0;
	ELSIF g_fbTcJoy.iLeftStick_X_Axis > 0 THEN 
		lrPos_LStick_x := (g_fbTcJoy.iLeftStick_X_Axis-g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * 43;
	ELSE 
		lrPos_LStick_x := (g_fbTcJoy.iLeftStick_X_Axis+g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * 43;
	END_IF
	IF lrTmpPos_LStick_x <> lrPos_LStick_x THEN
		IF afbMoveAbsolute_LStick_x[0].Error OR afbMoveAbsolute_LStick_x[1].Error THEN
			afbMoveAbsolute_LStick_x[0].Execute := FALSE;
			afbMoveAbsolute_LStick_x[1].Execute := FALSE;
		ELSIF (NOT afbMoveAbsolute_LStick_x[0].Execute AND NOT afbMoveAbsolute_LStick_x[1].Execute) 
		OR (NOT afbMoveAbsolute_LStick_x[0].Execute AND afbMoveAbsolute_LStick_x[1].Execute) THEN
			afbMoveAbsolute_LStick_x[0].Execute := TRUE;
			afbMoveAbsolute_LStick_x[1].Execute := FALSE;
		ELSE
			afbMoveAbsolute_LStick_x[0].Execute := FALSE;
			afbMoveAbsolute_LStick_x[1].Execute := TRUE;
		END_IF 
	END_IF
	//y
	lrTmpPos_LStick_y := lrPos_LStick_y;
	IF g_fbTcJoy.iLeftStick_Y_Axis = 0 THEN
		lrPos_LStick_y := 0;
	ELSIF g_fbTcJoy.iLeftStick_Y_Axis > 0 THEN
		lrPos_LStick_y := (g_fbTcJoy.iLeftStick_Y_Axis-g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * 43;
	ELSE
		lrPos_LStick_y := (g_fbTcJoy.iLeftStick_Y_Axis+g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * 43;
	END_IF
	IF lrTmpPos_LStick_y <> lrPos_LStick_y THEN
		IF (NOT afbMoveAbsolute_LStick_y[0].Execute AND NOT afbMoveAbsolute_LStick_y[1].Execute) 
		OR (NOT afbMoveAbsolute_LStick_y[0].Execute AND afbMoveAbsolute_LStick_y[1].Execute) THEN
			afbMoveAbsolute_LStick_y[0].Execute := TRUE;
			afbMoveAbsolute_LStick_y[1].Execute := FALSE;
		ELSE
			afbMoveAbsolute_LStick_y[0].Execute := FALSE;
			afbMoveAbsolute_LStick_y[1].Execute := TRUE;
		END_IF 
	END_IF
	
	FOR i:=0 TO 1 DO
		afbMoveAbsolute_LStick_x[i](
			Axis:= fbMover_Axis[1],
			Position:= lrPos_LStick_x, 
			Velocity:= lrVel_LStick_x, 
			Acceleration:= lrAcc_LStick_x, 
			Deceleration:= lrAcc_LStick_x, 
			Jerk:= lrAcc_LStick_x * 10);
		afbMoveAbsolute_LStick_y[i](
			Axis:= fbMover_Axis[2],
			Position:= lrPos_LStick_y, 
			Velocity:= lrVel_LStick_y, 
			Acceleration:= lrAcc_LStick_y, 
			Deceleration:= lrAcc_LStick_y, 
			Jerk:= lrAcc_LStick_y * 10);
	END_FOR

	Command.RightStick: //AB free move
	IF afbMoveAbsolute_RStick_a[0].Error OR afbMoveAbsolute_RStick_a[1].Error
	OR afbMoveAbsolute_RStick_a[0].Error OR afbMoveAbsolute_RStick_a[1].Error THEN
		afbMoveAbsolute_RStick_a[0].Execute := FALSE;
		afbMoveAbsolute_RStick_a[1].Execute := FALSE;
		afbMoveAbsolute_RStick_b[0].Execute := FALSE;
		afbMoveAbsolute_RStick_b[1].Execute := FALSE;
	END_IF
	IF bPos_High_z THEN
		lrRange_AB := 4;
	ELSE
		lrRange_AB := 1;
	END_IF
	//a
	lrTmpPos_RStick_a := lrPos_RStick_a;
	IF g_fbTcJoy.iRightStick_Y_Axis = 0 THEN
		lrPos_RStick_a := 0;
	ELSIF g_fbTcJoy.iRightStick_Y_Axis > 0 THEN
		lrPos_RStick_a := (g_fbTcJoy.iRightStick_Y_Axis-g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * lrRange_AB;
	ELSE
		lrPos_RStick_a := (g_fbTcJoy.iRightStick_Y_Axis+g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * lrRange_AB;
	END_IF
	IF lrTmpPos_RStick_a <> lrPos_RStick_a THEN
		IF afbMoveAbsolute_RStick_a[0].Error OR afbMoveAbsolute_RStick_a[1].Error THEN
			afbMoveAbsolute_RStick_a[0].Execute := FALSE;
			afbMoveAbsolute_RStick_a[1].Execute := FALSE;
		ELSIF (NOT afbMoveAbsolute_RStick_a[0].Execute AND NOT afbMoveAbsolute_RStick_a[1].Execute) 
		OR (NOT afbMoveAbsolute_RStick_a[0].Execute AND afbMoveAbsolute_RStick_a[1].Execute) THEN
			afbMoveAbsolute_RStick_a[0].Execute := TRUE;
			afbMoveAbsolute_RStick_a[1].Execute := FALSE;
		ELSE
			afbMoveAbsolute_RStick_a[0].Execute := FALSE;
			afbMoveAbsolute_RStick_a[1].Execute := TRUE;
		END_IF 
	END_IF
	//b
	lrTmpPos_RStick_b := lrPos_RStick_b;
	IF g_fbTcJoy.iRightStick_X_Axis = 0 THEN
		lrPos_RStick_b := 0;
	ELSIF g_fbTcJoy.iRightStick_X_Axis > 0 THEN
		lrPos_RStick_b := (g_fbTcJoy.iRightStick_X_Axis-g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * lrRange_AB;
	ELSE
		lrPos_RStick_b := (g_fbTcJoy.iRightStick_X_Axis+g_lrDeadZone)/(gc_lrMax_Stick-g_lrDeadZone) * lrRange_AB;
	END_IF
	IF lrTmpPos_RStick_b <> lrPos_RStick_b THEN
		IF afbMoveAbsolute_RStick_b[0].Error OR afbMoveAbsolute_RStick_b[1].Error THEN
			afbMoveAbsolute_RStick_b[0].Execute := FALSE;
			afbMoveAbsolute_RStick_b[1].Execute := FALSE;
		ELSIF (NOT afbMoveAbsolute_RStick_b[0].Execute AND NOT afbMoveAbsolute_RStick_b[1].Execute) 
		OR (NOT afbMoveAbsolute_RStick_b[0].Execute AND afbMoveAbsolute_RStick_b[1].Execute) THEN
			afbMoveAbsolute_RStick_b[0].Execute := TRUE;
			afbMoveAbsolute_RStick_b[1].Execute := FALSE;
		ELSE
			afbMoveAbsolute_RStick_b[0].Execute := FALSE;
			afbMoveAbsolute_RStick_b[1].Execute := TRUE;
		END_IF 
	END_IF
	
	FOR i:=0 TO 1 DO
		afbMoveAbsolute_RStick_a[i](
			Axis:= fbMover_Axis[4],
			Position:= lrPos_RStick_a, 
			Velocity:= lrVel_RStick_a, 
			Acceleration:= lrAcc_RStick_a, 
			Deceleration:= lrAcc_RStick_a, 
			Jerk:= lrAcc_RStick_a * 10);
		afbMoveAbsolute_RStick_b[i](
			Axis:= fbMover_Axis[5],
			Position:= lrPos_RStick_b, 
			Velocity:= lrVel_RStick_b, 
			Acceleration:= lrAcc_RStick_b, 
			Deceleration:= lrAcc_RStick_b, 
			Jerk:= lrAcc_RStick_b * 10);
	END_FOR
	
	Command.A: // Z Move
	IF bButton_A AND NOT bPos_High_z THEN
		lrPos_AButton_z := 3; //2+3
		fbMoveAbsolute_Abutton_z.Execute := TRUE;
		IF fbMoveAbsolute_Abutton_z.Done OR fbMoveAbsolute_Abutton_z.Error THEN
			fbMoveAbsolute_Abutton_z.Execute := FALSE;
			bButton_A := FALSE;
			bPos_High_z := TRUE;
		END_IF
	ELSIF bButton_A AND bPos_High_z THEN
		lrPos_AButton_z := 0; //2+0
		fbMoveAbsolute_Abutton_z.Execute := TRUE;
		IF fbMoveAbsolute_Abutton_z.Done OR fbMoveAbsolute_Abutton_z.Error THEN
			fbMoveAbsolute_Abutton_z.Execute := FALSE;
			bButton_A := FALSE;
			bPos_High_z := FALSE;
		END_IF
	END_IF
	
	fbMoveAbsolute_Abutton_z(
		Axis:= fbMover_Axis[3],
		Position:= lrPos_AButton_z, 
		Velocity:= lrVel_AButton_z, 
		Acceleration:= lrAcc_AButton_z, 
		Deceleration:= lrAcc_AButton_z, 
		Jerk:= lrAcc_AButton_z * 10);

	Command.B: //Mover Change
	iControlMover := iControlMover +1;

	Command.X: //Mover Change
	iControlMover := iControlMover -1;

	Command.Y: 
		 
	Command.L1: //L1 C CCW 90
	IF bButton_L1 THEN
		lrPos_L1Button_c := lrStandardPos_c + 90;
		fbMoveAbsolute_L1button_c.Execute := TRUE;
		IF fbMoveAbsolute_L1button_c.Done OR fbMoveAbsolute_L1button_c.Error OR fbMoveAbsolute_L1button_c.CommandAborted THEN
			fbMoveAbsolute_L1button_c.Execute := FALSE;
			bButton_L1 := FALSE;
			lrStandardPos_c := lrStandardPos_c + 90;
		END_IF
	END_IF
	fbMoveAbsolute_L1button_c(
		Axis:= fbMover_Axis[6],
		Position:= lrPos_L1Button_c, 
		Velocity:= lrVel_L1Button_c, 
		Acceleration:= lrAcc_L1Button_c, 
		Deceleration:= lrAcc_L1Button_c, 
		Jerk:= lrAcc_L1Button_c * 10);
	
	Command.R1: //R1 C CW 90
	IF bButton_R1 THEN
		lrPos_R1Button_c := lrStandardPos_c - 90;
		fbMoveAbsolute_R1button_c.Execute := TRUE;
		IF fbMoveAbsolute_R1button_c.Done OR fbMoveAbsolute_R1button_c.Error OR fbMoveAbsolute_R1button_c.CommandAborted THEN
			fbMoveAbsolute_R1button_c.Execute := FALSE;
			bButton_R1 := FALSE;
			lrStandardPos_c := lrStandardPos_c - 90;
		END_IF
	END_IF
	fbMoveAbsolute_R1button_c(
		Axis:= fbMover_Axis[6],
		Position:= lrPos_R1Button_c, 
		Velocity:= lrVel_R1Button_c, 
		Acceleration:= lrAcc_R1Button_c, 
		Deceleration:= lrAcc_R1Button_c, 
		Jerk:= lrAcc_R1Button_c * 10);
		
	Command.L2: // Fast C CCW 
	lrTmpVel_L2Button_c := lrVel_L2Button_c;
	IF g_fbTcJoy.iLeftTrigger_Axis = 0 THEN
		afbMoveAbsolute_L2Button_c[0].Execute := FALSE;
		afbMoveAbsolute_L2Button_c[1].Execute := FALSE;
		bPosReload_L2Button := FALSE;
	ELSE
		lrVel_L2Button_c := g_fbTcJoy.iLeftTrigger_Axis/gc_lrMax_L2R2 * 500;
		//更新条件
		IF NOT bPosReload_L2Button AND ABS((lrStandardPos_c-360) - fbMover_Axis[6].NcToPlc.ActPos) < 180 THEN 
			lrStandardPos_c := lrStandardPos_c - 360;
			bPosReload_L2Button := TRUE;
			bReload_L2Button := TRUE;
		ELSIF lrTmpVel_L2Button_c <> lrVel_L2Button_c THEN
			bReload_L2Button := TRUE;
		END_IF
		IF bPosReload_L2Button AND lrStandardPos_c > fbMover_Axis[6].NcToPlc.ActPos THEN
			bPosReload_L2Button := FALSE; 
		END_IF
		
		//更新命令
		IF bReload_L2Button THEN
			bReload_L2Button := FALSE;
			IF (NOT afbMoveAbsolute_L2Button_c[0].Execute AND NOT afbMoveAbsolute_L2Button_c[1].Execute)
			OR (NOT afbMoveAbsolute_L2Button_c[0].Execute AND afbMoveAbsolute_L2Button_c[1].Execute) THEN
				afbMoveAbsolute_L2Button_c[0].Execute := TRUE;
				afbMoveAbsolute_L2Button_c[1].Execute := FALSE;
			ELSE
				afbMoveAbsolute_L2Button_c[0].Execute := FALSE;
				afbMoveAbsolute_L2Button_c[1].Execute := TRUE;
			END_IF
		END_IF
	END_IF
	
	FOR i:=0 TO 1 DO
		lrPos_L2Button_c := lrStandardPos_c - 360;
		afbMoveAbsolute_L2Button_c[i](
			Axis:= fbMover_Axis[6],
			Position:= lrPos_L2Button_c, 
			Velocity:= lrVel_L2Button_c, 
			Acceleration:= lrAcc_L2Button_c, 
			Deceleration:= lrAcc_L2Button_c, 
			Jerk:= lrAcc_L2Button_c * 10);
	END_FOR
	
	Command.R2: // Fast C CW
	lrTmpVel_R2Button_c := lrVel_R2Button_c;
	IF g_fbTcJoy.iRightTrigger_Axis = 0 THEN
		afbMoveAbsolute_R2Button_c[0].Execute := FALSE;
		afbMoveAbsolute_R2Button_c[1].Execute := FALSE;
		bPosReload_R2Button := FALSE;
	ELSE
		lrVel_R2Button_c := g_fbTcJoy.iRightTrigger_Axis/gc_lrMax_L2R2 * 500;
		//更新条件
		IF NOT bPosReload_R2Button AND ABS((lrStandardPos_c+360)  - fbMover_Axis[6].NcToPlc.ActPos) < 180 THEN 
			lrStandardPos_c := lrStandardPos_c + 360;
			bPosReload_R2Button := TRUE;
			bReload_R2Button := TRUE;
		ELSIF lrTmpVel_R2Button_c <> lrVel_R2Button_c THEN
			bReload_R2Button := TRUE;
		END_IF
		IF bPosReload_R2Button AND lrStandardPos_c < fbMover_Axis[6].NcToPlc.ActPos THEN
			bPosReload_R2Button := FALSE; 
		END_IF
		
		//更新命令
		IF bReload_R2Button THEN
			bReload_R2Button := FALSE;
			IF (NOT afbMoveAbsolute_R2Button_c[0].Execute AND NOT afbMoveAbsolute_R2Button_c[1].Execute)
			OR (NOT afbMoveAbsolute_R2Button_c[0].Execute AND afbMoveAbsolute_R2Button_c[1].Execute) THEN
				afbMoveAbsolute_R2Button_c[0].Execute := TRUE;
				afbMoveAbsolute_R2Button_c[1].Execute := FALSE;
			ELSE
				afbMoveAbsolute_R2Button_c[0].Execute := FALSE;
				afbMoveAbsolute_R2Button_c[1].Execute := TRUE;
			END_IF
		END_IF
	END_IF
	
	FOR i:=0 TO 1 DO
		lrPos_R2Button_c := lrStandardPos_c + 360;
		afbMoveAbsolute_R2Button_c[i](
			Axis:= fbMover_Axis[6],
			Position:= lrPos_R2Button_c, 
			Velocity:= lrVel_R2Button_c, 
			Acceleration:= lrAcc_R2Button_c, 
			Deceleration:= lrAcc_R2Button_c, 
			Jerk:= lrAcc_R2Button_c * 10);
	END_FOR
	
	Command.Start: //Servo On Off
	//Power Control
	IF bButton_Start AND bPowered THEN
		fbMover.Disable(commandFeedback:= afbMoverFB[0]);
		IF fbMover.MCTOPLC.STD.State = MC_PLANAR_STATE.Disabled THEN
			bButton_Start := FALSE;
			bPowered := FALSE;
		END_IF
	ELSIF bButton_Start AND NOT bPowered THEN
		fbMover.Enable(commandFeedback:= afbMoverFB[1]);
		IF fbMover.MCTOPLC.STD.State = MC_PLANAR_STATE.Enabled THEN
			bButton_Start := FALSE;
			bPowered := TRUE;
		END_IF
	END_IF

	Command.Back: //Reset
	fbMover.Reset(commandFeedback:= afbMoverFB[5]);
	
END_CASE]]></ST>
      </Implementation>
    </Action>
    <Action Name="aExternalSetPoint" Id="{a0bbab1a-2921-467c-b78a-7abc7e4902a1}">
      <Implementation>
        <ST><![CDATA[stMoverVector_Pos.x := fbMover_Axis[1].NcToPlc.ActPos;
stMoverVector_Pos.y := fbMover_Axis[2].NcToPlc.ActPos;
stMoverVector_Pos.z := fbMover_Axis[3].NcToPlc.ActPos;
stMoverVector_Pos.a := fbMover_Axis[4].NcToPlc.ActPos;
stMoverVector_Pos.b := fbMover_Axis[5].NcToPlc.ActPos;
stMoverVector_Pos.c := fbMover_Axis[6].NcToPlc.ActPos;

stMoverVector_Vel.x := fbMover_Axis[1].NcToPlc.ActVelo;
stMoverVector_Vel.y := fbMover_Axis[2].NcToPlc.ActVelo;
stMoverVector_Vel.z := fbMover_Axis[3].NcToPlc.ActVelo;
stMoverVector_Vel.a := fbMover_Axis[4].NcToPlc.ActVelo;
stMoverVector_Vel.b := fbMover_Axis[5].NcToPlc.ActVelo;
stMoverVector_Vel.c := fbMover_Axis[6].NcToPlc.ActVelo;

stMoverVector_Acc.x := fbMover_Axis[1].NcToPlc.ActAcc;
stMoverVector_Acc.y := fbMover_Axis[2].NcToPlc.ActAcc;
stMoverVector_Acc.z := fbMover_Axis[3].NcToPlc.ActAcc;
stMoverVector_Acc.a := fbMover_Axis[4].NcToPlc.ActAcc;
stMoverVector_Acc.b := fbMover_Axis[5].NcToPlc.ActAcc;
stMoverVector_Acc.c := fbMover_Axis[6].NcToPlc.ActAcc;
	
IF bPowered AND fbMover.MCTOPLC.STD.State = MC_PLANAR_STATE.Enabled THEN
	fbMover.SetExternalSetpoint(
		setPosition:= stMoverVector_Pos, 
		setVelocity:= stMoverVector_Vel, 
		setAcceleration:= stMoverVector_Acc);
	stExtSetPoi.mode := MC_EXTERNAL_SET_POSITION_MODE.Relative;
	fbMover.StartExternalSetpointGeneration(commandFeedback:= afbMoverFB[5], options:= stExtSetPoi);
ELSE
	fbMover.StopExternalSetpointGeneration(commandFeedback:= afbMoverFB[6]);
END_IF]]></ST>
      </Implementation>
    </Action>
    <Action Name="aSystem" Id="{d64e3794-e70f-4b40-b558-e15566543541}">
      <Implementation>
        <ST><![CDATA[//Error
IF fbMover.MCTOPLC.STD.State = MC_PLANAR_STATE.Error THEN
	iCommand := Command.Back;
	aCommand();
	RETURN;
END_IF

//Power
bButton_Start := g_fbTcJoy.Start_Button OR bButton_Start;
IF bButton_Start THEN
	iCommand := Command.Start;
	aCommand();
	RETURN;
END_IF

IF NOT fbMover.MCTOPLC.STD.State = MC_PLANAR_STATE.Enabled THEN
	RETURN;
END_IF

//Virtual Axis PowerControll
IF bPowered THEN
	FOR i:=1 TO 6 DO
		afbPower[i].Enable := TRUE;
		afbPower[i].Enable_Negative := TRUE;
		afbPower[i].Enable_Positive := TRUE;
		afbPower[i](Axis:=fbMover_Axis[i]);
	END_FOR
ELSE
	FOR i:=1 TO 6 DO
		afbPower[i].Enable := FALSE;
		afbPower[i].Enable_Negative := TRUE;
		afbPower[i].Enable_Positive := TRUE;
		afbPower[i](Axis:=fbMover_Axis[i]);
	END_FOR
END_IF

//Pad
IF NOT bBusy_Pad AND g_fbTcJoy.DPad_Down_Button THEN
	lrPos_Pad_x := lrStandardPos_x;
	lrPos_Pad_y := lrStandardPos_y - 120;
	bStart_Pad := TRUE;
ELSIF NOT bBusy_Pad AND g_fbTcJoy.DPad_Up_Button THEN
	lrPos_Pad_x := lrStandardPos_x;
	lrPos_Pad_y := lrStandardPos_y + 120;
	bStart_Pad := TRUE;
ELSIF NOT bBusy_Pad AND g_fbTcJoy.DPad_Left_Button THEN
	lrPos_Pad_x := lrStandardPos_x - 120;
	lrPos_Pad_y := lrStandardPos_y;
	bStart_Pad := TRUE;
ELSIF NOT bBusy_Pad AND g_fbTcJoy.DPad_Right_Button THEN
	lrPos_Pad_x := lrStandardPos_x + 120;
	lrPos_Pad_y := lrStandardPos_y;
	bStart_Pad := TRUE;
END_IF
IF NOT bBusy_Pad AND bStart_Pad THEN
	iCommand := Command.Pad;
	aCommand();
ELSE
	IF afbMoverFB[2].Done AND bBusy_Pad THEN
		lrStandardPos_x := lrPos_Pad_x;
		lrStandardPos_y := lrPos_Pad_y;
		bBusy_Pad := FALSE;
		bStart_Pad := FALSE;
	ELSIF afbMoverFB[2].Error THEN
		bBusy_Pad := FALSE;
		bStart_Pad := FALSE;
	END_IF
END_IF

//C CCW
bButton_L1 := g_fbTcJoy.LeftShoulder_Button OR bButton_L1;
IF bButton_L1 THEN
	iCommand := Command.L1;
	aCommand();
END_IF


//C CW
bButton_R1 := g_fbTcJoy.RightShoulder_Button OR bButton_R1;
IF bButton_R1 THEN
	iCommand := Command.R1;
	aCommand();
END_IF

//Z
bButton_A := g_fbTcJoy.A_Button OR bButton_A;
IF bButton_A THEN
	iCommand := Command.A;
	aCommand();
END_IF

//L2
iCommand := Command.L2;
aCommand();

//R2
iCommand := Command.R2;
aCommand();

//LStick
iCommand := Command.LeftStick;
aCommand();

//RStick
iCommand := Command.RightStick;
aCommand();
]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="ControllerMode">
      <LineId Id="215" Count="1" />
      <LineId Id="44" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="32" Count="0" />
    </LineIds>
    <LineIds Name="ControllerMode.aCommand">
      <LineId Id="1" Count="1" />
      <LineId Id="186" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="19" Count="2" />
      <LineId Id="12" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="391" Count="0" />
      <LineId Id="394" Count="0" />
      <LineId Id="392" Count="0" />
      <LineId Id="390" Count="0" />
      <LineId Id="395" Count="1" />
      <LineId Id="393" Count="0" />
      <LineId Id="370" Count="0" />
      <LineId Id="289" Count="0" />
      <LineId Id="272" Count="2" />
      <LineId Id="271" Count="0" />
      <LineId Id="520" Count="1" />
      <LineId Id="275" Count="0" />
      <LineId Id="288" Count="0" />
      <LineId Id="360" Count="1" />
      <LineId Id="359" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="300" Count="0" />
      <LineId Id="295" Count="0" />
      <LineId Id="299" Count="0" />
      <LineId Id="355" Count="0" />
      <LineId Id="298" Count="0" />
      <LineId Id="297" Count="0" />
      <LineId Id="294" Count="0" />
      <LineId Id="291" Count="0" />
      <LineId Id="397" Count="0" />
      <LineId Id="372" Count="2" />
      <LineId Id="522" Count="1" />
      <LineId Id="375" Count="3" />
      <LineId Id="382" Count="7" />
      <LineId Id="371" Count="0" />
      <LineId Id="287" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="279" Count="1" />
      <LineId Id="282" Count="3" />
      <LineId Id="277" Count="0" />
      <LineId Id="364" Count="5" />
      <LineId Id="363" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="398" Count="6" />
      <LineId Id="476" Count="1" />
      <LineId Id="479" Count="1" />
      <LineId Id="478" Count="0" />
      <LineId Id="405" Count="3" />
      <LineId Id="524" Count="1" />
      <LineId Id="409" Count="16" />
      <LineId Id="458" Count="2" />
      <LineId Id="526" Count="1" />
      <LineId Id="461" Count="14" />
      <LineId Id="441" Count="16" />
      <LineId Id="160" Count="0" />
      <LineId Id="124" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="210" Count="0" />
      <LineId Id="498" Count="0" />
      <LineId Id="511" Count="3" />
      <LineId Id="510" Count="0" />
      <LineId Id="211" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="499" Count="0" />
      <LineId Id="516" Count="3" />
      <LineId Id="515" Count="0" />
      <LineId Id="203" Count="0" />
      <LineId Id="503" Count="0" />
      <LineId Id="483" Count="6" />
      <LineId Id="79" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="98" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="97" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="535" Count="5" />
      <LineId Id="551" Count="0" />
      <LineId Id="542" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="529" Count="5" />
      <LineId Id="528" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="552" Count="14" />
      <LineId Id="62" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="590" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="622" Count="1" />
      <LineId Id="642" Count="0" />
      <LineId Id="173" Count="0" />
      <LineId Id="177" Count="0" />
      <LineId Id="638" Count="0" />
      <LineId Id="582" Count="0" />
      <LineId Id="607" Count="0" />
      <LineId Id="626" Count="0" />
      <LineId Id="608" Count="0" />
      <LineId Id="599" Count="0" />
      <LineId Id="591" Count="1" />
      <LineId Id="627" Count="0" />
      <LineId Id="629" Count="1" />
      <LineId Id="628" Count="0" />
      <LineId Id="635" Count="0" />
      <LineId Id="609" Count="0" />
      <LineId Id="618" Count="0" />
      <LineId Id="612" Count="0" />
      <LineId Id="624" Count="0" />
      <LineId Id="613" Count="4" />
      <LineId Id="610" Count="1" />
      <LineId Id="88" Count="0" />
      <LineId Id="579" Count="0" />
      <LineId Id="568" Count="0" />
      <LineId Id="699" Count="0" />
      <LineId Id="569" Count="5" />
      <LineId Id="567" Count="0" />
      <LineId Id="575" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="644" Count="1" />
      <LineId Id="696" Count="1" />
      <LineId Id="648" Count="29" />
      <LineId Id="700" Count="0" />
      <LineId Id="679" Count="6" />
      <LineId Id="643" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="189" Count="5" />
      <LineId Id="196" Count="3" />
      <LineId Id="307" Count="2" />
      <LineId Id="92" Count="3" />
      <LineId Id="3" Count="0" />
    </LineIds>
    <LineIds Name="ControllerMode.aExternalSetPoint">
      <LineId Id="1" Count="0" />
      <LineId Id="26" Count="4" />
      <LineId Id="32" Count="5" />
      <LineId Id="31" Count="0" />
      <LineId Id="39" Count="5" />
      <LineId Id="38" Count="0" />
      <LineId Id="55" Count="1" />
      <LineId Id="64" Count="2" />
      <LineId Id="63" Count="0" />
      <LineId Id="59" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="58" Count="0" />
    </LineIds>
    <LineIds Name="ControllerMode.aSystem">
      <LineId Id="79" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="78" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="54" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="59" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="65" Count="0" />
      <LineId Id="161" Count="15" />
      <LineId Id="160" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="43" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="111" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="112" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="113" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="84" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="88" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="89" Count="1" />
      <LineId Id="149" Count="2" />
      <LineId Id="85" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="177" Count="4" />
      <LineId Id="36" Count="0" />
      <LineId Id="115" Count="1" />
      <LineId Id="182" Count="3" />
      <LineId Id="130" Count="1" />
      <LineId Id="114" Count="0" />
      <LineId Id="139" Count="3" />
      <LineId Id="138" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="188" Count="1" />
      <LineId Id="187" Count="0" />
      <LineId Id="191" Count="2" />
      <LineId Id="190" Count="0" />
      <LineId Id="137" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="145" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="146" Count="2" />
      <LineId Id="17" Count="0" />
      <LineId Id="19" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>